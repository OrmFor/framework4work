<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jlkj.web.shopnew.dao.CustomerMapper" >
  <resultMap id="BaseResultMap" type="com.jlkj.web.shopnew.pojo.Customer" extends="associationMap">
	<id column="id" property="id" />
	<result column="customer_id" property="customerId" />
	<result column="belong_uid" property="belongUid" />
	<result column="customer_type" property="customerType" />
	<result column="create_time" property="createTime" />
	<result column="update_time" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List" >
		`id`
		,`customer_id`
		,`belong_uid`
		,`customer_type`
		,`create_time`
		,`update_time`
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `customer`
    WHERE `id` = #{id}
  </select>
  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `customer`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
	LIMIT 1
  </select>
  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT ${aggregate_sql} FROM `customer`
    <include refid="map_params_where_condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    DELETE FROM `customer`
    WHERE `id` = #{id}
  </delete>
  <insert id="insert" parameterType="com.jlkj.web.shopnew.pojo.Customer" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `customer` (
	  `customer_id`
	  ,`belong_uid`
	  ,`customer_type`
	  ,`create_time`
	  ,`update_time`
      )
    VALUES (
		  
		  #{customerId}
		  ,
		  #{belongUid}
		  ,
		  #{customerType}
		  ,
		  <if test="createTime != null" >
			#{createTime}
      </if>
      <if test="createTime == null" >
      NOW()
		  </if>
		  ,
		  <if test="updateTime != null" >
			#{updateTime}
      </if>
      <if test="updateTime == null" >
      NOW()
		  </if>
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jlkj.web.shopnew.pojo.Customer" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `customer`
    <trim prefix="(" suffix=")" suffixOverrides="," >
		  <if test="customerId != null" >
			`customer_id`,
		  </if>
		  <if test="belongUid != null" >
			`belong_uid`,
		  </if>
		  <if test="customerType != null" >
			`customer_type`,
		  </if>
			`create_time`,
			`update_time`,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="customerId != null" >
			#{customerId},
		  </if>
		  <if test="belongUid != null" >
			#{belongUid},
		  </if>
		  <if test="customerType != null" >
			#{customerType},
		  </if>
		  <if test="createTime != null" >
			#{createTime},
      </if>
      <if test="createTime == null" >
      NOW(),
		  </if>
		  <if test="updateTime != null" >
			#{updateTime},
      </if>
      <if test="updateTime == null" >
      NOW(),
		  </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jlkj.web.shopnew.pojo.Customer" >
    UPDATE `customer`
    <set >
	  <if test="customerId != null" >
        `customer_id` = #{customerId},
      </if>
	  <if test="belongUid != null" >
        `belong_uid` = #{belongUid},
      </if>
	  <if test="customerType != null" >
        `customer_type` = #{customerType},
      </if>
	  <if test="createTime != null" >
        `create_time` = #{createTime},
      </if>
	  <if test="updateTime != null" >
        `update_time` = #{updateTime},
      </if>
    </set>
    WHERE `id` = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jlkj.web.shopnew.pojo.Customer" >
	UPDATE `customer` SET
        `customer_id` = #{customerId},
        `belong_uid` = #{belongUid},
        `customer_type` = #{customerType},
        `create_time` = #{createTime},
        `update_time` = #{updateTime}
    WHERE `id` = #{id}
  </update>
  <update id="updateByCondition" parameterType="java.util.Map" >
    UPDATE `customer`
    <set>
	  <if test="entity.customerId != null" >
        `customer_id` = #{entity.customerId},
      </if>
	  <if test="entity.belongUid != null" >
        `belong_uid` = #{entity.belongUid},
      </if>
	  <if test="entity.customerType != null" >
        `customer_type` = #{entity.customerType},
      </if>
	  <if test="entity.createTime != null" >
        `create_time` = #{entity.createTime},
      </if>
	  <if test="entity.updateTime != null" >
        `update_time` = #{entity.updateTime},
      </if>
      <foreach collection="entity.nullColums" item="nullColum">
        `${nullColum}` = NULL,
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
    UPDATE `customer`
    <set>
      <foreach collection="increateNumbers" item="numberCloums">
        `${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <sql id="map_params_where_condition" >
    <trim prefix="WHERE" prefixOverrides="AND">
	  <if test="id != null" >
        AND `id` = #{id}
	  </if>
	  <if test="customerId != null" >
        AND `customer_id` = #{customerId}
	  </if>
	  <if test="belongUid != null" >
        AND `belong_uid` = #{belongUid}
	  </if>
	  <if test="customerType != null" >
        AND `customer_type` = #{customerType}
	  </if>
	  <if test="createTime != null" >
        AND `create_time` = #{createTime}
	  </if>
	  <if test="updateTime != null" >
        AND `update_time` = #{updateTime}
	  </if>
	  <if test="condition != null">
	  <if test="condition.id != null" >
        AND `id` = #{condition.id}
	  </if>
	  <if test="condition.customerId != null" >
        AND `customer_id` = #{condition.customerId}
	  </if>
	  <if test="condition.belongUid != null" >
        AND `belong_uid` = #{condition.belongUid}
	  </if>
	  <if test="condition.customerType != null" >
        AND `customer_type` = #{condition.customerType}
	  </if>
	  <if test="condition.createTime != null" >
        AND `create_time` = #{condition.createTime}
	  </if>
	  <if test="condition.updateTime != null" >
        AND `update_time` = #{condition.updateTime}
	  </if>
	  </if>
	  <if test="vo != null and !vo.expressionChainList.empty">
        AND
        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <if test="expressionChainList != null and !expressionChainList.empty">
        AND
        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <include refid="map_params_where_condition_ext" />
    </trim>
  </sql>
  <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM `customer`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
    <if test="pageBeginIndex != null and pageSize != null" >
      LIMIT #{pageBeginIndex},#{pageSize}
    </if>
    <if test="pageBeginIndex == null and pageSize != null" >
      LIMIT #{pageSize}
    </if>
    <if test="pageBeginIndex != null and pageSize == null" >
      LIMIT #{pageBeginIndex}
    </if>
  </select>
  <delete id="delete" parameterType="java.util.Map" >
    DELETE
    FROM `customer`
    <include refid="map_params_where_condition" />
  </delete>
  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(1)
    FROM `customer`
    <include refid="map_params_where_condition" />
  </select>
</mapper>